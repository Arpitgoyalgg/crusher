// @ts-nocheck
const AnalyticsNode = require('analytics-node');
import getMAC from 'getmac'
import os from "os"

const devKey = 'IM0t0F7DFPxWwbDrd8WStLqOjJYLYuaq'
var analytics = new AnalyticsNode(process.env.SEGMENT_API_KEY || devKey, {flushAfter: 5, flushInterval: 3});

//@Note- If too much conlfiction then create .crusher/temp and save there
const getUniqueID =  ()=>{
    if (typeof window === 'undefined'){
        const date_ob = new Date();
        const hours = date_ob.getHours();
        const date = ("0" + date_ob.getDate()).slice(-2);
        const min = date_ob.getMinutes();

        // generate 22:12:05 format. this should be valid for some time
        const suffix = `${date}:${hours}:${Math.floor(min/10)}`

       return getMAC()+"::"+suffix;
    }
    // In browser docs, a new user is generated by segment.
    return null;  
}   

const getAnalyticsObj = ()=>{
    if (typeof window === 'undefined'){
        return analytics
    }
    //ts-ignore
    return window['analytics'];
}

export class Analytics{
    // Use later on, give option to not track user
    shouldTrack:boolean = true;

    // Use later on, give option to not track user
    static disabledTelemetry:boolean = false;

    clientType: 'web' | 'node';
    clientName: 'cli' | 'electron-app' | 'web-app' | 'docs' | 'website';
    static analyticsObj = getAnalyticsObj();

    static track({userId = null, event,properties}){
        if(Analytics.disabledTelemetry) return;

        Analytics.analyticsObj.track({
            userId,
            anonymousId: getUniqueID(),
            event, 
            properties
        })
    }

    static trackProject({groupId, event, properties}){
        if(Analytics.disabledTelemetry) return;
        Analytics.analyticsObj.track({userId: `gp-${groupId}`, event, properties})
    }

    static identifyUser({
        userId, email, anonymousId = getUniqueID()
    }){
        if(Analytics.disabledTelemetry) return;
        Analytics.analyticsObj.identify({userId,anonymousId, 
        traits:{
            email,
            device: {
                name: `${process.platform}-${process.arch}`,
                nodeVersion: process.version,
                cpu: os.cpus()[0].model + ` (${os.cpus().length} cores)`,
            }
        }});

    }

    static identifyGroup({
        groupId
    }){
        if(Analytics.disabledTelemetry) return;
        Analytics.analyticsObj.identify({groupId});
    }
}